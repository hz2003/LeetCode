public class Solution {
    int prices[];
    int min[][], mex[][];
    boolean minQ[][], mexQ[][];
    private int Min(int k, int n)
    {
        if (minQ[k][n])
            return min[k][n];
        int result = Math.max(Min(k, n-1), Mex(k - 1, n - 1)) + prices[n] - prices[n - 1];
        minQ[k][n] = true;
        min[k][n] = result;
        return result;
    }
    
    private int Mex(int k, int n)
    {
        if (mexQ[k][n])
            return mex[k][n];
        int result = Math.max(Min(k, n-1), Mex(k, n - 1));
        mexQ[k][n] = true;
        mex[k][n] = result;
        return result;
    }
    
    private int[] tight(int p[])
    {
        if(p.length < 5)
            return p;
        boolean keep[] = new boolean[p.length];
        keep[0] = true;
        keep[p.length - 1] = true;
        int count = 2;
        for(int i = 1; i < p.length - 1; i++)
        {
            if(((p[i + 1] - p[i]) * (p[i] - p[i - 1])) <= 0 )
            {
                count++;
                keep[i] = true;
            }
        }
        int[] result = new int[count];
        for(int i = 0, j = 0; i < p.length; i++)
        {
            if(keep[i])
                result[j++] = p[i];
        }
        return result;
    }
    
    private int maxP()
    {
        int result = 0;
        for(int i = 1; i < prices.length; i++)
            result += Math.max(0, prices[i] - prices[i - 1]);
        return result;
    }
    public int maxProfit(int k, int[] prices) {
        prices = tight(prices);
        this.prices = prices;
        int n = prices.length;
        if(k == 0 || n < 2)
            return 0;
        if(k > n / 2 + 2)
            return maxP();
        min = new int[k + 1][n];
        mex = new int[k + 1][n];
        minQ = new boolean[k + 1][n];
        mexQ = new boolean[k + 1][n];
        for(int i = 0; i <= k; i++)
        {
            minQ[i][0] = true;
            mexQ[i][0] = true;
        }
        for(int i = 0; i < n; i++)
        {
            minQ[0][i] = true;
            mexQ[0][i] = true;
        }
        return Math.max(Min(k, n-1), Mex(k, n-1));
    }
}
